package functionalities;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import weka.classifiers.Classifier;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;

public class MalwarePrediction {

	int attributesNumber;
	ArrayList<Attribute> attributeList;
	Instances apkInstance;
	Classifier cls;
	
	public MalwarePrediction(Instances inst,Classifier c,ArrayList<String> permissionsList,ArrayList<Attribute> atlist) {
		attributeList=atlist;
		apkInstance=inst;
		attributesNumber=apkInstance.numAttributes();
		apkInstance.setClassIndex(attributesNumber - 1);
		cls=c;
		addValues(permissionsList);
		
	}
	
	
	public void addValues(ArrayList<String> permissionsList) {
		Instance iExample = new DenseInstance(attributesNumber);
		
		for (int i=0;i<attributesNumber-1;i++) {
			
			if (permissionsList.contains(attributeList.get(i).name())) {
				
				iExample.setValue((Attribute)attributeList.get(i), 1);
			}else iExample.setValue((Attribute)attributeList.get(i), 0);
		}
		iExample.setValue((Attribute)attributeList.get(attributesNumber-1), 0);
		apkInstance.add(iExample);
		
		
	}
	
	public int predict() {
		
		
		try {
			//double actualclass = apkInstance.instance(0).classValue();
			//String actual = apkInstance.classAttribute().value((int) actualclass);
			double prednbk = cls.classifyInstance(apkInstance.instance(0));
			String predString = apkInstance.classAttribute().value((int) prednbk);
			return Integer.parseInt(predString);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return 0;
	}
	
	/*
	public static void main(String[] args) throws Exception {
		Instances myAttributes = new Instances(new BufferedReader(new FileReader("Datasets/myAttributes.arff")));
		int attributesNumber = myAttributes.numAttributes();
		myAttributes.setClassIndex(attributesNumber - 1);

		ArrayList<Attribute> attributeList = new ArrayList<Attribute>();
		for (int i = 0; i < attributesNumber; i++) {
			attributeList.add(myAttributes.attribute(i));
		}

		Instances ApkInstance = new Instances("apkInstance", attributeList, attributesNumber);
		Classifier cls = (Classifier) weka.core.SerializationHelper.read("myModel.model");
		ArrayList<String> alist=new ArrayList<String>();
		alist.add("android.permission.ACCESS_NETWORK_STATE");
		alist.add("android.permission.ACCESS_WIFI_STATE");
		alist.add("android.permission.CALL_PHONE");
		alist.add("android.permission.DISABLE_KEYGUARD");
		alist.add("android.permission.INTERNET");
		alist.add("android.permission.RECEIVE_BOOT_COMPLETED");
		alist.add("android.permission.RECEIVE_SMS");
		alist.add("android.permission.RESTART_PACKAGES");
		alist.add("android.permission.SEND_SMS");
		alist.add("android.permission.VIBRATE");
		alist.add("android.permission.WAKE_LOCK");
		alist.add("android.permission.WRITE_APN_SETTINGS");
		alist.add("android.permission.WRITE_CONTACTS");
		alist.add("android.permission.WRITE_EXTERNAL_STORAGE");
		alist.add("android.permission.WRITE_SMS");
		
		
		
		MalwarePrediction malpred= new MalwarePrediction(ApkInstance,cls,alist,attributeList);
		System.out.print(malpred.predict());
	}*/

}
